// Code generated by MockGen. DO NOT EDIT.
// Source: deps.go
//
// Generated by this command:
//
//	mockgen -source=deps.go -package=mocks -destination=./mocks/deps.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/opravdin/word-of-wisdom/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockquotesRepository is a mock of quotesRepository interface.
type MockquotesRepository struct {
	ctrl     *gomock.Controller
	recorder *MockquotesRepositoryMockRecorder
	isgomock struct{}
}

// MockquotesRepositoryMockRecorder is the mock recorder for MockquotesRepository.
type MockquotesRepositoryMockRecorder struct {
	mock *MockquotesRepository
}

// NewMockquotesRepository creates a new mock instance.
func NewMockquotesRepository(ctrl *gomock.Controller) *MockquotesRepository {
	mock := &MockquotesRepository{ctrl: ctrl}
	mock.recorder = &MockquotesRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockquotesRepository) EXPECT() *MockquotesRepositoryMockRecorder {
	return m.recorder
}

// GetRandom mocks base method.
func (m *MockquotesRepository) GetRandom(ctx context.Context) domain.Quote {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRandom", ctx)
	ret0, _ := ret[0].(domain.Quote)
	return ret0
}

// GetRandom indicates an expected call of GetRandom.
func (mr *MockquotesRepositoryMockRecorder) GetRandom(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRandom", reflect.TypeOf((*MockquotesRepository)(nil).GetRandom), ctx)
}
