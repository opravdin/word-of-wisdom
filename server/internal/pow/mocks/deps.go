// Code generated by MockGen. DO NOT EDIT.
// Source: deps.go
//
// Generated by this command:
//
//	mockgen -source=deps.go -package=mocks -destination=./mocks/deps.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	pow "github.com/opravdin/word-of-wisdom/internal/repository/pow"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateTask mocks base method.
func (m *MockRepository) CreateTask(ctx context.Context, task pow.Task, ttl time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTask", ctx, task, ttl)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTask indicates an expected call of CreateTask.
func (mr *MockRepositoryMockRecorder) CreateTask(ctx, task, ttl any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTask", reflect.TypeOf((*MockRepository)(nil).CreateTask), ctx, task, ttl)
}

// DecrementUnsolvedCount mocks base method.
func (m *MockRepository) DecrementUnsolvedCount(ctx context.Context, ip string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecrementUnsolvedCount", ctx, ip)
	ret0, _ := ret[0].(error)
	return ret0
}

// DecrementUnsolvedCount indicates an expected call of DecrementUnsolvedCount.
func (mr *MockRepositoryMockRecorder) DecrementUnsolvedCount(ctx, ip any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecrementUnsolvedCount", reflect.TypeOf((*MockRepository)(nil).DecrementUnsolvedCount), ctx, ip)
}

// GetAndIncrementRequestCount mocks base method.
func (m *MockRepository) GetAndIncrementRequestCount(ctx context.Context, ip string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAndIncrementRequestCount", ctx, ip)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAndIncrementRequestCount indicates an expected call of GetAndIncrementRequestCount.
func (mr *MockRepositoryMockRecorder) GetAndIncrementRequestCount(ctx, ip any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAndIncrementRequestCount", reflect.TypeOf((*MockRepository)(nil).GetAndIncrementRequestCount), ctx, ip)
}

// GetTask mocks base method.
func (m *MockRepository) GetTask(ctx context.Context, taskID string) (*pow.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTask", ctx, taskID)
	ret0, _ := ret[0].(*pow.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTask indicates an expected call of GetTask.
func (mr *MockRepositoryMockRecorder) GetTask(ctx, taskID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTask", reflect.TypeOf((*MockRepository)(nil).GetTask), ctx, taskID)
}

// GetUnsolvedCount mocks base method.
func (m *MockRepository) GetUnsolvedCount(ctx context.Context, ip string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnsolvedCount", ctx, ip)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnsolvedCount indicates an expected call of GetUnsolvedCount.
func (mr *MockRepositoryMockRecorder) GetUnsolvedCount(ctx, ip any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnsolvedCount", reflect.TypeOf((*MockRepository)(nil).GetUnsolvedCount), ctx, ip)
}

// IncrementUnsolvedCount mocks base method.
func (m *MockRepository) IncrementUnsolvedCount(ctx context.Context, ip string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrementUnsolvedCount", ctx, ip)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IncrementUnsolvedCount indicates an expected call of IncrementUnsolvedCount.
func (mr *MockRepositoryMockRecorder) IncrementUnsolvedCount(ctx, ip any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementUnsolvedCount", reflect.TypeOf((*MockRepository)(nil).IncrementUnsolvedCount), ctx, ip)
}

// DeleteTask mocks base method.
func (m *MockRepository) DeleteTask(ctx context.Context, taskID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTask", ctx, taskID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTask indicates an expected call of DeleteTask.
func (mr *MockRepositoryMockRecorder) DeleteTask(ctx, taskID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTask", reflect.TypeOf((*MockRepository)(nil).DeleteTask), ctx, taskID)
}

// DecrementUnsolvedCountBy mocks base method.
func (m *MockRepository) DecrementUnsolvedCountBy(ctx context.Context, ip string, count int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecrementUnsolvedCountBy", ctx, ip, count)
	ret0, _ := ret[0].(error)
	return ret0
}

// DecrementUnsolvedCountBy indicates an expected call of DecrementUnsolvedCountBy.
func (mr *MockRepositoryMockRecorder) DecrementUnsolvedCountBy(ctx, ip, count any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecrementUnsolvedCountBy", reflect.TypeOf((*MockRepository)(nil).DecrementUnsolvedCountBy), ctx, ip, count)
}

// MockPoWUtilsInterface is a mock of PoWUtilsInterface interface.
type MockPoWUtilsInterface struct {
	ctrl     *gomock.Controller
	recorder *MockPoWUtilsInterfaceMockRecorder
	isgomock struct{}
}

// MockPoWUtilsInterfaceMockRecorder is the mock recorder for MockPoWUtilsInterface.
type MockPoWUtilsInterfaceMockRecorder struct {
	mock *MockPoWUtilsInterface
}

// NewMockPoWUtilsInterface creates a new mock instance.
func NewMockPoWUtilsInterface(ctrl *gomock.Controller) *MockPoWUtilsInterface {
	mock := &MockPoWUtilsInterface{ctrl: ctrl}
	mock.recorder = &MockPoWUtilsInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPoWUtilsInterface) EXPECT() *MockPoWUtilsInterfaceMockRecorder {
	return m.recorder
}

// CalculateDifficultyLevel mocks base method.
func (m *MockPoWUtilsInterface) CalculateDifficultyLevel(requestCount int64) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateDifficultyLevel", requestCount)
	ret0, _ := ret[0].(int)
	return ret0
}

// CalculateDifficultyLevel indicates an expected call of CalculateDifficultyLevel.
func (mr *MockPoWUtilsInterfaceMockRecorder) CalculateDifficultyLevel(requestCount any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateDifficultyLevel", reflect.TypeOf((*MockPoWUtilsInterface)(nil).CalculateDifficultyLevel), requestCount)
}

// GenerateRandomSeed mocks base method.
func (m *MockPoWUtilsInterface) GenerateRandomSeed() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateRandomSeed")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateRandomSeed indicates an expected call of GenerateRandomSeed.
func (mr *MockPoWUtilsInterfaceMockRecorder) GenerateRandomSeed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateRandomSeed", reflect.TypeOf((*MockPoWUtilsInterface)(nil).GenerateRandomSeed))
}

// VerifySolution mocks base method.
func (m *MockPoWUtilsInterface) VerifySolution(challengeID, seed, nonce string, difficultyLevel int) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifySolution", challengeID, seed, nonce, difficultyLevel)
	ret0, _ := ret[0].(bool)
	return ret0
}

// VerifySolution indicates an expected call of VerifySolution.
func (mr *MockPoWUtilsInterfaceMockRecorder) VerifySolution(challengeID, seed, nonce, difficultyLevel any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifySolution", reflect.TypeOf((*MockPoWUtilsInterface)(nil).VerifySolution), challengeID, seed, nonce, difficultyLevel)
}
